<nav class="navbar has-background-info mb-5" role="navigation" aria-label="main navigation">

    <div class="navbar-brand p-3">
      
      <a href="#"><i class="fab fa-artstation fa-3x has-text-white ml-6"></i></a> 
      
      <a role="button" class="navbar-burger" aria-label="menu" aria-expanded="false" data-target="navbarBasicExample">
        <span aria-hidden="true"></span>
        <span aria-hidden="true"></span>
        <span aria-hidden="true"></span>
      </a>
    </div>

    <div id="navbarBasicExample" class="navbar-menu">
    
      <div class="navbar-end">
        <div class="navbar-item">
          
          <a><p class="has-text-white is-size-4 mr-4"><%= @current_user.name %></p></a>
          
          <a class="image is-42x42 mr-6">
            <a href="/users/<%= @current_user.id %>/edit">
              <figure class="is-rounded"><%= image_tag(@current_user.profile_picture) %> </figure>
            </a>
          </a>

          <%= link_to "Log out", logout_path, method: :delete, class: 'button has-text-info has-text-bold is-white' %>
       
        </div>
      </div>
    </div>
</nav>

<div class='container' id="posts">
<!-- Writing new Posts ------------------------------------------------------------------------------------------------------------------------------------------- -->
    <%= render 'new' %>
<!-- ------------------------------------------------------------------------------------------------------------------------------------------------------------ -->


    <!-- See _post.html partial for viewing posts -->
    <%= render @posts %>
    <div id="post-end"></div>


    <%#Comment Template for JS do not delete %>
    <div class="card box has-background-white-ter pb-1 is-hidden" id="comment-template">
      <div class="card-content pb-1">
        <div class="media">
          <div class="media-left">
            <figure class="image is-32x32">
            </figure>
          </div>

          <div class="media-content">
            <p class="title is-6"></p>
          </div>
        </div>

        <div class="content comment-message">
          <p class="has-text-dark"></p>
          <time class="has-text-grey"></time>
        </div>

        <footer class="card-footer">
        </footer>
      </div>
    </div>

<%#Post Template for JS do not Delete%>

        <div id="post-template" class="card mb-5 is-hidden">
        <div class="card-content">
          <div class="media">
            <div class="media-left">
              <figure class="image is-64x64">
              </figure>
            </div>
            <div class="media-content">
              <p class="title is-4"></p>
            </div>
          </div>
          <div class="content post-message">
            <p></p>
            <time class="has-text-grey"></time>
          </div>

            <footer class="card-footer">
              <%= link_to '<i class="far fa-thumbs-up fa-lg"></i>'.html_safe, "", remote:true, method: :post, class: "card-footer-item like-button" %>
              <a href="#" class="card-footer-item edit-post-button">Edit</a>
              <%= link_to "Delete", "", remote: true, class: "card-footer-item delete-post-button",
                              method: :delete,
                              data: { confirm: "Are you sure?" } %>
            </footer>

          <div class='likes'>
          </div>

          <div class="comment-box p-2">
          </div>      

          <footer id="post-footer" class="is-fixed-bottom mt-5">
          </footer>
        </div>
      </div>


</div>


<script>
  // Show form warning if empty post is submitted
  const form = document.getElementById('post-form')
  form.addEventListener('submit', e => {
    if(!e.target[2].value) {
       e.preventDefault();
      document.getElementById('form-warning').innerText = 'Post cannot be empty'
    }
  })
  
  // Show form warning if empty comment is submitted
  const replyForms = document.querySelectorAll('.reply-form')
  for (const form of replyForms) {
    form.addEventListener('submit', e => {
       if (!e.target[2].value) {
         e.preventDefault();
         e.target.querySelector('p').innerText = "Reply cannot be empty."
       }
    })
  }
  
  // Remove form warning(s) with click on body
  document.body.onclick = () => {
   
    const replyWarnings = document.querySelectorAll('.reply-warning')
     for (const reply of replyWarnings) {
       reply.innerText = ''
     }

     document.getElementById('form-warning').innerText = ''
  }

  // convert # and @ into link-like text in posts
  const postMessages = document.querySelectorAll('.post-message')
  for (const post of postMessages) {
    post.innerHTML = post.innerHTML.replace(/[#@]([^ ]+)/g, hashtag => `<span class='has-text-link'>${hashtag}</span>`)
  }

   // convert # and @ into link-like text in comments
  const commentMessages = document.querySelectorAll('.comment-message')
  for (const comment of commentMessages) {
    comment.innerHTML = comment.innerHTML.replace(/[#@]([^ ]+)/g, hashtag => `<span class='has-text-link'>${hashtag}</span>`)
  }

  // Open Edit Post Modal
  const editPostButtons = document.querySelectorAll('.edit-post-button')
  for (const ePButton of editPostButtons) {
    ePButton.addEventListener('click', (e) => {
      document.getElementById(`${e.target.id}-modal`).classList.add('is-active')
    
    })
  }

  // Close Edit Post Modal
  const modalElements = document.querySelectorAll('.modal-background, .modal-close, .modal-card-head .delete, .modal-card-foot .button')
  
  for (const modalElement of modalElements) {
    modalElement.addEventListener('click', () => {
      console.log('modal clicked up')
      
      const modals = document.querySelectorAll('.modal')
      for (const modal of modals) {
        modal.classList.remove("is-active")
      }
    })
  }

</script>


